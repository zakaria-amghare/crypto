import random
import hashlib
import base64
from math import gcd
import os


class DiffieHellman:
    def __init__(self):
        self.p = None  # Prime modulus
        self.g = None  # Generator
        self.private_key = None
        self.public_key = None
        self.shared_secret = None
        self.session_key = None
        
    def generate_random_prime(self, bits):
        """Generate a large prime number of specified bit length"""
        print(f"G√©n√©ration d'un nombre premier de {bits} bits...")
        
        while True:
            candidate = random.getrandbits(bits)
            candidate |= (1 << bits - 1) | 1  # Set MSB and LSB to 1
            
            if self.is_prime_miller_rabin(candidate):
                return candidate

    def is_prime_miller_rabin(self, n, k=10):
        """Miller-Rabin primality test"""
        if n < 2:
            return False
        if n == 2 or n == 3:
            return True
        if n % 2 == 0:
            return False
        
        r = 0
        d = n - 1
        while d % 2 == 0:
            r += 1
            d //= 2
        
        for _ in range(k):
            a = random.randrange(2, n - 1)
            x = pow(a, d, n)
            
            if x == 1 or x == n - 1:
                continue
                
            for _ in range(r - 1):
                x = pow(x, 2, n)
                if x == n - 1:
                    break
            else:
                return False
        return True

    def generate_parameters(self, key_length=1024):
        """Generate public parameters (p, g)"""
        print("G√©n√©ration des param√®tres publics...")
        self.p = self.generate_random_prime(key_length)
        self.g = 2  # Simplified generator
        print(f"Param√®tres g√©n√©r√©s avec succ√®s!")
        
    def generate_private_key(self):
        """Generate private key"""
        if not self.p:
            raise ValueError("Les param√®tres publics doivent √™tre g√©n√©r√©s d'abord")
        
        self.private_key = random.randrange(2, self.p - 1)
        print("Cl√© priv√©e g√©n√©r√©e avec succ√®s!")
        
    def generate_public_key(self):
        """Generate public key from private key"""
        if not self.private_key or not self.p or not self.g:
            raise ValueError("Les param√®tres et la cl√© priv√©e doivent √™tre g√©n√©r√©s d'abord")
            
        self.public_key = pow(self.g, self.private_key, self.p)
        print("Cl√© publique g√©n√©r√©e avec succ√®s!")
        
    def compute_shared_secret(self, other_public_key):
        """Compute shared secret using other party's public key"""
        if not self.private_key or not self.p:
            raise ValueError("Cl√© priv√©e et param√®tres requis")
            
        self.shared_secret = pow(other_public_key, self.private_key, self.p)
        print("Secret partag√© calcul√© avec succ√®s!")
        
    def derive_session_key(self, key_length=32):
        """Derive session key from shared secret"""
        if not self.shared_secret:
            raise ValueError("Le secret partag√© doit √™tre calcul√© d'abord")
            
        secret_bytes = str(self.shared_secret).encode('utf-8')
        hash_digest = hashlib.sha256(secret_bytes).digest()
        self.session_key = hash_digest[:key_length]
        print("Cl√© de session d√©riv√©e avec succ√®s!")


def print_banner():
    print("=" * 60)
    print("      √âCHANGE DE CL√âS DIFFIE-HELLMAN INTERACTIF")
    print("=" * 60)
    print()


def get_user_input():
    """Interface utilisateur pour saisir les options"""
    print("Choisissez une option:")
    print("1. G√©n√©rer les param√®tres publics (p, g)")
    print("2. G√©n√©rer votre paire de cl√©s (priv√©e/publique)")
    print("3. Calculer le secret partag√© avec la cl√© publique de l'autre partie")
    print("4. D√©river une cl√© de session")
    print("5. Afficher vos informations actuelles")
    print("6. Simuler un √©change complet entre deux parties")
    print("7. Chiffrer un message avec la cl√© de session (AES simulation)")
    print("8. Quitter")
    print()

    choice = input("Votre choix (1-8): ").strip()
    return choice


def generate_parameters(dh):
    """Interface pour g√©n√©rer les param√®tres publics"""
    print("\n--- G√âN√âRATION DES PARAM√àTRES PUBLICS ---")
    
    print("Choisissez la taille de la cl√©:")
    print("1. 512 bits (rapide, pour d√©monstration)")
    print("2. 1024 bits (s√©curit√© mod√©r√©e)")
    print("3. 2048 bits (s√©curit√© √©lev√©e, plus lent)")
    
    size_choice = input("Votre choix (1-3): ").strip()
    
    if size_choice == "1":
        key_length = 512
    elif size_choice == "2":
        key_length = 1024
    elif size_choice == "3":
        key_length = 2048
    else:
        print("Choix invalide.")
        return
    
    try:
        dh.generate_parameters(key_length)
        
        print("\n--- PARAM√àTRES G√âN√âR√âS ---")
        print(f"Prime p: {dh.p}")
        print(f"G√©n√©rateur g: {dh.g}")
        print(f"Prime p (hex): {hex(dh.p)}")
        print("Ces param√®tres peuvent √™tre partag√©s publiquement.")
        
    except Exception as e:
        print(f"Erreur lors de la g√©n√©ration des param√®tres: {e}")


def generate_key_pair(dh):
    """Interface pour g√©n√©rer la paire de cl√©s"""
    print("\n--- G√âN√âRATION DE VOTRE PAIRE DE CL√âS ---")
    
    if not dh.p or not dh.g:
        print("Erreur: Les param√®tres publics doivent √™tre g√©n√©r√©s d'abord.")
        return
    
    try:
        dh.generate_private_key()
        dh.generate_public_key()
        
        print("\n--- CL√âS G√âN√âR√âES ---")
        print(f"Cl√© priv√©e: {dh.private_key}")
        print(f"‚ö†Ô∏è  GARDEZ CETTE CL√â SECR√àTE!")
        print(f"Cl√© publique: {dh.public_key}")
        print(f"Cl√© publique (hex): {hex(dh.public_key)}")
        print(f"Cl√© publique (base64): {base64.b64encode(dh.public_key.to_bytes((dh.public_key.bit_length() + 7) // 8, 'big')).decode()}")
        print("‚úÖ Vous pouvez partager votre cl√© publique en toute s√©curit√©.")
        
    except Exception as e:
        print(f"Erreur lors de la g√©n√©ration des cl√©s: {e}")


def compute_shared_secret(dh):
    """Interface pour calculer le secret partag√©"""
    print("\n--- CALCUL DU SECRET PARTAG√â ---")
    
    if not dh.private_key or not dh.p:
        print("Erreur: Vous devez d'abord g√©n√©rer vos cl√©s.")
        return
    
    print("Format de la cl√© publique de l'autre partie:")
    print("1. Nombre d√©cimal")
    print("2. Hexad√©cimal")
    print("3. Base64")
    
    format_choice = input("Votre choix (1-3): ").strip()
    other_public_input = input("Entrez la cl√© publique de l'autre partie: ").strip()
    
    try:
        if format_choice == "1":
            other_public_key = int(other_public_input)
        elif format_choice == "2":
            other_public_key = int(other_public_input, 16)
        elif format_choice == "3":
            decoded_bytes = base64.b64decode(other_public_input)
            other_public_key = int.from_bytes(decoded_bytes, 'big')
        else:
            print("Choix invalide.")
            return
            
        dh.compute_shared_secret(other_public_key)
        
        print("\n--- SECRET PARTAG√â CALCUL√â ---")
        print(f"Secret partag√©: {dh.shared_secret}")
        print(f"Secret partag√© (hex): {hex(dh.shared_secret)}")
        print("üîê Ce secret est maintenant connu des deux parties uniquement!")
        
    except Exception as e:
        print(f"Erreur lors du calcul du secret partag√©: {e}")


def derive_session_key(dh):
    """Interface pour d√©river une cl√© de session"""
    print("\n--- D√âRIVATION DE LA CL√â DE SESSION ---")
    
    if not dh.shared_secret:
        print("Erreur: Le secret partag√© doit √™tre calcul√© d'abord.")
        return
    
    print("Choisissez la taille de la cl√© de session:")
    print("1. 16 bytes (128 bits) - Compatible AES-128")
    print("2. 24 bytes (192 bits) - Compatible AES-192")
    print("3. 32 bytes (256 bits) - Compatible AES-256")
    
    size_choice = input("Votre choix (1-3): ").strip()
    
    if size_choice == "1":
        key_length = 16
    elif size_choice == "2":
        key_length = 24
    elif size_choice == "3":
        key_length = 32
    else:
        print("Choix invalide.")
        return
    
    try:
        dh.derive_session_key(key_length)
        
        print("\n--- CL√â DE SESSION D√âRIV√âE ---")
        print(f"Cl√© de session (hex): {dh.session_key.hex()}")
        print(f"Cl√© de session (base64): {base64.b64encode(dh.session_key).decode()}")
        print(f"Taille: {len(dh.session_key)} bytes ({len(dh.session_key) * 8} bits)")
        print("üîë Cette cl√© peut maintenant √™tre utilis√©e pour le chiffrement sym√©trique!")
        
    except Exception as e:
        print(f"Erreur lors de la d√©rivation de la cl√©: {e}")


def show_current_info(dh):
    """Affiche les informations actuelles"""
    print("\n--- VOS INFORMATIONS ACTUELLES ---")
    
    if dh.p and dh.g:
        print(f"Param√®tres publics:")
        print(f"  Prime p: {dh.p}")
        print(f"  G√©n√©rateur g: {dh.g}")
    else:
        print("Param√®tres publics: Non g√©n√©r√©s")
    
    if dh.private_key:
        print(f"Cl√© priv√©e: {dh.private_key} (SECR√àTE)")
    else:
        print("Cl√© priv√©e: Non g√©n√©r√©e")
    
    if dh.public_key:
        print(f"Cl√© publique: {dh.public_key}")
        print(f"Cl√© publique (hex): {hex(dh.public_key)}")
    else:
        print("Cl√© publique: Non g√©n√©r√©e")
    
    if dh.shared_secret:
        print(f"Secret partag√©: {dh.shared_secret}")
    else:
        print("Secret partag√©: Non calcul√©")
    
    if dh.session_key:
        print(f"Cl√© de session: {dh.session_key.hex()}")
    else:
        print("Cl√© de session: Non d√©riv√©e")


def simulate_full_exchange():
    """Simule un √©change complet entre deux parties"""
    print("\n--- SIMULATION D'UN √âCHANGE COMPLET ---")
    
    # Cr√©ation de deux instances DH
    alice = DiffieHellman()
    bob = DiffieHellman()
    
    print("√âtape 1: G√©n√©ration des param√®tres publics...")
    alice.generate_parameters(1024)
    
    # Bob utilise les m√™mes param√®tres
    bob.p = alice.p
    bob.g = alice.g
    
    print("√âtape 2: Alice g√©n√®re sa paire de cl√©s...")
    alice.generate_private_key()
    alice.generate_public_key()
    
    print("√âtape 3: Bob g√©n√®re sa paire de cl√©s...")
    bob.generate_private_key()
    bob.generate_public_key()
    
    print("√âtape 4: √âchange des cl√©s publiques...")
    print(f"Alice envoie sa cl√© publique √† Bob: {alice.public_key}")
    print(f"Bob envoie sa cl√© publique √† Alice: {bob.public_key}")
    
    print("√âtape 5: Calcul des secrets partag√©s...")
    alice.compute_shared_secret(bob.public_key)
    bob.compute_shared_secret(alice.public_key)
    
    print("√âtape 6: V√©rification...")
    if alice.shared_secret == bob.shared_secret:
        print("‚úÖ SUCCESS! Alice et Bob ont le m√™me secret partag√©!")
        print(f"Secret partag√©: {alice.shared_secret}")
        
        print("√âtape 7: D√©rivation des cl√©s de session...")
        alice.derive_session_key()
        bob.derive_session_key()
        
        if alice.session_key == bob.session_key:
            print("‚úÖ SUCCESS! Les cl√©s de session sont identiques!")
            print(f"Cl√© de session: {alice.session_key.hex()}")
        else:
            print("‚ùå ERREUR! Les cl√©s de session diff√®rent!")
    else:
        print("‚ùå ERREUR! Les secrets partag√©s diff√®rent!")


def encrypt_message_simulation(dh):
    """Simulation de chiffrement avec la cl√© de session"""
    print("\n--- SIMULATION DE CHIFFREMENT ---")
    
    if not dh.session_key:
        print("Erreur: Une cl√© de session doit √™tre d√©riv√©e d'abord.")
        return
    
    message = input("Entrez le message √† chiffrer: ")
    if not message:
        print("Erreur: Le message ne peut pas √™tre vide.")
        return
    
    # Simulation simple avec XOR (pas un vrai AES)
    message_bytes = message.encode('utf-8')
    
    # √âtendre la cl√© si n√©cessaire
    key_extended = (dh.session_key * ((len(message_bytes) // len(dh.session_key)) + 1))[:len(message_bytes)]
    
    # Chiffrement XOR simple
    encrypted = bytes(a ^ b for a, b in zip(message_bytes, key_extended))
    
    print("\n--- R√âSULTATS DU CHIFFREMENT (SIMULATION) ---")
    print(f"Message original: {message}")
    print(f"Cl√© utilis√©e: {dh.session_key.hex()}")
    print(f"Message chiffr√© (hex): {encrypted.hex()}")
    print(f"Message chiffr√© (base64): {base64.b64encode(encrypted).decode()}")
    print("‚ö†Ô∏è  Ceci est une simulation XOR simple, pas un vrai AES!")
    
    # Test de d√©chiffrement
    decrypted = bytes(a ^ b for a, b in zip(encrypted, key_extended))
    decrypted_message = decrypted.decode('utf-8')
    print(f"V√©rification - Message d√©chiffr√©: {decrypted_message}")


def main():
    """Fonction principale"""
    dh = DiffieHellman()
    
    while True:
        print_banner()
        choice = get_user_input()
        
        if choice == "1":
            generate_parameters(dh)
        elif choice == "2":
            generate_key_pair(dh)
        elif choice == "3":
            compute_shared_secret(dh)
        elif choice == "4":
            derive_session_key(dh)
        elif choice == "5":
            show_current_info(dh)
        elif choice == "6":
            simulate_full_exchange()
        elif choice == "7":
            encrypt_message_simulation(dh)
        elif choice == "8":
            print("Au revoir!")
            break
        else:
            print("Choix invalide. Veuillez choisir entre 1 et 8.")
        
        input("\nAppuyez sur Entr√©e pour continuer...")
        print("\n" * 2)


if __name__ == "__main__":
    main()