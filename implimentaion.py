# Implementation compl√®te des algorithmes de chiffrement
# Classification: Classiques, Sym√©triques, Asym√©triques, Signatures Num√©riques

# Imports for existing modules
from AES import *
from DES import *
from RSA import *
from RC4 import *
from Diffie_Hellman import *
from ElGamal import *
from veginere import *
from kasiskiAndSomeFunction import *
from dechiffrement_cesar import *

# Imports for classical algorithms and signatures
import string
import numpy as np
import random
from math import gcd
from sympy import Matrix
import hashlib
import math


# ==================== DIGITAL SIGNATURE IMPLEMENTATION ====================

def is_prime(n, k=5):
    """Miller-Rabin primality test"""
    if n < 2:
        return False
    if n == 2 or n == 3:
        return True
    if n % 2 == 0:
        return False

    # Write n-1 as 2^r * d
    r = 0
    d = n - 1
    while d % 2 == 0:
        r += 1
        d //= 2

    # Witness loop
    for _ in range(k):
        a = random.randrange(2, n - 1)
        x = pow(a, d, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(r - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False
    return True


def generate_prime(bits):
    """Generate a random prime number of specified bit length"""
    while True:
        num = random.getrandbits(bits)
        num |= (1 << bits - 1) | 1  # Ensure it's odd and has correct bit length
        if is_prime(num):
            return num


def extended_gcd(a, b):
    """Extended Euclidean Algorithm"""
    if a == 0:
        return b, 0, 1
    gcd, x1, y1 = extended_gcd(b % a, a)
    x = y1 - (b // a) * x1
    y = x1
    return gcd, x, y


def mod_inverse(e, phi):
    """Calculate modular multiplicative inverse"""
    gcd, x, _ = extended_gcd(e, phi)
    if gcd != 1:
        raise ValueError("Modular inverse does not exist")
    return (x % phi + phi) % phi


def generate_rsa_keypair_signature(key_size=1024):
    """Generate RSA public and private key pair for signatures"""
    p = generate_prime(key_size // 2)
    q = generate_prime(key_size // 2)
    while p == q:
        q = generate_prime(key_size // 2)

    n = p * q
    phi = (p - 1) * (q - 1)

    # Choose e (commonly 65537)
    e = 65537
    while math.gcd(e, phi) != 1:
        e += 2

    # Calculate d (private exponent)
    d = mod_inverse(e, phi)

    # Public key: (e, n), Private key: (d, n)
    public_key = (e, n)
    private_key = (d, n)

    return public_key, private_key


def hash_message(message):
    """Create SHA-256 hash of the message"""
    if isinstance(message, str):
        message = message.encode('utf-8')
    return hashlib.sha256(message).digest()


def bytes_to_int(bytes_data):
    """Convert bytes to integer"""
    return int.from_bytes(bytes_data, byteorder='big')


def int_to_bytes(num, length):
    """Convert integer to bytes"""
    return num.to_bytes(length, byteorder='big')


def sign_message(message, private_key):
    """Create a digital signature for the message"""
    # Hash the message
    message_hash = hash_message(message)
    hash_int = bytes_to_int(message_hash)

    # Sign with private key (d, n)
    d, n = private_key
    signature_int = pow(hash_int, d, n)

    # Convert back to bytes
    byte_length = (n.bit_length() + 7) // 8
    signature = int_to_bytes(signature_int, byte_length)

    return signature


def verify_signature(message, signature, public_key):
    """Verify a digital signature"""
    try:
        # Hash the message
        message_hash = hash_message(message)
        hash_int = bytes_to_int(message_hash)

        # Convert signature to integer
        signature_int = bytes_to_int(signature)

        # Verify with public key (e, n)
        e, n = public_key
        decrypted_hash_int = pow(signature_int, e, n)

        # Compare hashes
        return hash_int == decrypted_hash_int

    except Exception:
        return False


def export_key_info(public_key, private_key):
    """Export keys in a readable format"""
    e, n = public_key
    d, _ = private_key

    return {
        'public_key': {
            'e': e,
            'n': n
        },
        'private_key': {
            'd': d,
            'n': n
        },
        'key_size_bits': n.bit_length()
    }


def create_signature_system(key_size=1024):
    """Convenience function to create a complete signature system"""
    public_key, private_key = generate_rsa_keypair_signature(key_size)

    def sign(message):
        return sign_message(message, private_key)

    def verify(message, signature):
        return verify_signature(message, signature, public_key)

    def get_public_key():
        return public_key

    def get_key_info():
        return export_key_info(public_key, private_key)

    return {
        'sign': sign,
        'verify': verify,
        'get_public_key': get_public_key,
        'get_key_info': get_key_info,
        'public_key': public_key,
        'private_key': private_key
    }


def sign_multiple_messages(messages, private_key):
    """Sign multiple messages at once"""
    signatures = []
    for msg in messages:
        sig = sign_message(msg, private_key)
        signatures.append(sig)
    return signatures


def verify_multiple_signatures(messages, signatures, public_key):
    """Verify multiple message-signature pairs"""
    results = []
    for msg, sig in zip(messages, signatures):
        valid = verify_signature(msg, sig, public_key)
        results.append(valid)
    return results


def create_message_signature_pair(message, private_key):
    """Create a message-signature pair for easy transmission"""
    signature = sign_message(message, private_key)
    return {
        'message': message,
        'signature': signature.hex(),  # Hex for easy transmission
        'signature_bytes': signature
    }


def verify_message_signature_pair(pair, public_key):
    """Verify a message-signature pair"""
    message = pair['message']
    signature_bytes = pair['signature_bytes']
    return verify_signature(message, signature_bytes, public_key)


# ==================== SIGNATURE MENU FUNCTIONS ====================

def main_signatures():
    """Main menu for digital signatures"""
    # Store key pairs globally for the session
    global current_keys
    current_keys = None

    while True:
        print("\n" + "-" * 50)
        print(" üîè SIGNATURES NUM√âRIQUES RSA")
        print("-" * 50)
        print("1. G√©n√©rer une paire de cl√©s")
        print("2. Signer un message")
        print("3. V√©rifier une signature")
        print("4. D√©monstration compl√®te")
        print("5. Signer plusieurs messages")
        print("6. Test d'int√©grit√© (message modifi√©)")
        print("7. Afficher les informations des cl√©s")
        print("0. Retour au menu principal")
        print("-" * 50)

        choice = input("\nEntrez votre choix (0-7): ")

        if choice == '1':
            generate_keys_menu()
        elif choice == '2':
            sign_message_menu()
        elif choice == '3':
            verify_signature_menu()
        elif choice == '4':
            demo_complete_signature()
        elif choice == '5':
            sign_multiple_menu()
        elif choice == '6':
            test_integrity_menu()
        elif choice == '7':
            display_key_info()
        elif choice == '0':
            break
        else:
            print("‚ùå Choix invalide, veuillez r√©essayer.")


def generate_keys_menu():
    """Generate RSA key pair for signatures"""
    global current_keys

    print("\nüîë G√©n√©ration de paires de cl√©s RSA")
    print("Tailles de cl√©s disponibles:")
    print("1. 512 bits (rapide, d√©mo)")
    print("2. 1024 bits (standard)")
    print("3. 2048 bits (haute s√©curit√©)")

    size_choice = input("Choisissez la taille (1-3): ")

    key_sizes = {'1': 512, '2': 1024, '3': 2048}
    key_size = key_sizes.get(size_choice, 1024)

    print(f"\n‚è≥ G√©n√©ration des cl√©s {key_size} bits en cours...")
    public_key, private_key = generate_rsa_keypair_signature(key_size)

    current_keys = {
        'public': public_key,
        'private': private_key,
        'size': key_size
    }

    print("‚úÖ Paire de cl√©s g√©n√©r√©e avec succ√®s!")
    print(f"üîë Cl√© publique (e, n): ({public_key[0]}, {str(public_key[1])[:20]}...)")
    print(f"üîê Cl√© priv√©e g√©n√©r√©e (taille: {key_size} bits)")


def sign_message_menu():
    """Sign a message"""
    global current_keys

    if current_keys is None:
        print("‚ùå Aucune paire de cl√©s g√©n√©r√©e. G√©n√©rez d'abord une paire de cl√©s.")
        return

    print("\n‚úçÔ∏è  Signature de message")
    message = input("Entrez le message √† signer: ")

    if not message.strip():
        print("‚ùå Message vide, abandon.")
        return

    print("‚è≥ Signature en cours...")
    signature = sign_message(message, current_keys['private'])

    print("‚úÖ Message sign√© avec succ√®s!")
    print(f"üìù Message original: '{message}'")
    print(f"üîè Signature (hex): {signature.hex()}")
    print(f"üìä Taille de la signature: {len(signature)} bytes")

    # Store for potential verification
    current_keys['last_message'] = message
    current_keys['last_signature'] = signature


def verify_signature_menu():
    """Verify a signature"""
    global current_keys

    if current_keys is None:
        print("‚ùå Aucune paire de cl√©s g√©n√©r√©e. G√©n√©rez d'abord une paire de cl√©s.")
        return

    print("\nüîç V√©rification de signature")
    print("1. V√©rifier le dernier message sign√©")
    print("2. Saisir manuellement message et signature")

    choice = input("Votre choix (1-2): ")

    if choice == '1':
        if 'last_message' not in current_keys:
            print("‚ùå Aucun message pr√©c√©demment sign√©.")
            return

        message = current_keys['last_message']
        signature = current_keys['last_signature']
        print(f"üìù Message: '{message}'")

    elif choice == '2':
        message = input("Entrez le message original: ")
        signature_hex = input("Entrez la signature (format hexad√©cimal): ")

        try:
            signature = bytes.fromhex(signature_hex)
        except ValueError:
            print("‚ùå Format de signature invalide.")
            return
    else:
        print("‚ùå Choix invalide.")
        return

    print("‚è≥ V√©rification en cours...")
    is_valid = verify_signature(message, signature, current_keys['public'])

    if is_valid:
        print("‚úÖ Signature VALIDE - Le message est authentique et int√®gre!")
    else:
        print("‚ùå Signature INVALIDE - Le message a √©t√© modifi√© ou la signature est incorrecte!")


def demo_complete_signature():
    """Complete demonstration of digital signatures"""
    print("\nüéØ D√©monstration compl√®te des signatures num√©riques")
    print("=" * 60)

    # Generate keys
    print("üìã 1. G√©n√©ration de la paire de cl√©s RSA (512 bits)...")
    public_key, private_key = generate_rsa_keypair_signature(512)

    # Test message
    message = "Ceci est un message s√©curis√© avec signature num√©rique!"
    print(f"üìù 2. Message original: '{message}'")

    # Sign the message
    print("\n‚úçÔ∏è  3. Signature du message...")
    signature = sign_message(message, private_key)
    print(f"üîè Signature g√©n√©r√©e (taille: {len(signature)} bytes)")

    # Verify the signature
    print("\nüîç 4. V√©rification de la signature...")
    is_valid = verify_signature(message, signature, public_key)
    print(f"‚úÖ Signature {'VALIDE' if is_valid else 'INVALIDE'}")

    # Test with tampered message
    print("\nüö® 5. Test avec un message modifi√©...")
    tampered_message = "Ceci est un message MODIFI√â avec signature num√©rique!"
    is_valid_tampered = verify_signature(tampered_message, signature, public_key)
    print(f"üìù Message modifi√©: '{tampered_message}'")
    print(f"‚ùå Signature sur message modifi√©: {'VALIDE' if is_valid_tampered else 'INVALIDE'}")

    # Key information
    print("\nüîë 6. Informations sur les cl√©s:")
    key_info = export_key_info(public_key, private_key)
    print(f"   ‚Ä¢ Taille des cl√©s: {key_info['key_size_bits']} bits")
    print(f"   ‚Ä¢ Exposant public (e): {key_info['public_key']['e']}")
    print(f"   ‚Ä¢ Module (n): {str(key_info['public_key']['n'])[:30]}...")

    print("\nüéâ D√©monstration termin√©e!")


def sign_multiple_menu():
    """Sign multiple messages"""
    global current_keys

    if current_keys is None:
        print("‚ùå Aucune paire de cl√©s g√©n√©r√©e. G√©n√©rez d'abord une paire de cl√©s.")
        return

    print("\nüìù Signature de plusieurs messages")
    messages = []

    print("Entrez les messages √† signer (ligne vide pour terminer):")
    i = 1
    while True:
        message = input(f"Message {i}: ")
        if not message.strip():
            break
        messages.append(message)
        i += 1

    if not messages:
        print("‚ùå Aucun message saisi.")
        return

    print(f"\n‚è≥ Signature de {len(messages)} messages...")
    signatures = sign_multiple_messages(messages, current_keys['private'])

    print("‚úÖ Tous les messages ont √©t√© sign√©s!")

    # Verify all signatures
    print("\nüîç V√©rification automatique de toutes les signatures...")
    results = verify_multiple_signatures(messages, signatures, current_keys['public'])

    for i, (msg, result) in enumerate(zip(messages, results)):
        status = "‚úÖ VALIDE" if result else "‚ùå INVALIDE"
        print(f"Message {i + 1}: {status}")
        print(f"  Contenu: '{msg[:50]}{'...' if len(msg) > 50 else ''}'")


def test_integrity_menu():
    """Test message integrity by modifying message"""
    global current_keys

    if current_keys is None:
        print("‚ùå Aucune paire de cl√©s g√©n√©r√©e. G√©n√©rez d'abord une paire de cl√©s.")
        return

    print("\nüß™ Test d'int√©grit√© - D√©tection de modifications")

    original_message = input("Entrez le message original: ")
    if not original_message.strip():
        print("‚ùå Message vide.")
        return

    # Sign original message
    print("‚è≥ Signature du message original...")
    signature = sign_message(original_message, current_keys['private'])
    print("‚úÖ Message sign√©!")

    # Verify original
    is_valid_original = verify_signature(original_message, signature, current_keys['public'])
    print(f"üîç V√©rification message original: {'‚úÖ VALIDE' if is_valid_original else '‚ùå INVALIDE'}")

    # Test modified message
    print(f"\nMessage original: '{original_message}'")
    modified_message = input("Entrez une version modifi√©e du message: ")

    if modified_message == original_message:
        print("‚ö†Ô∏è  Les messages sont identiques!")
        return

    # Verify modified message with same signature
    is_valid_modified = verify_signature(modified_message, signature, current_keys['public'])
    print(f"\nüö® Test avec message modifi√©:")
    print(f"Message modifi√©: '{modified_message}'")
    print(f"V√©rification: {'‚úÖ VALIDE' if is_valid_modified else '‚ùå INVALIDE (comme attendu)'}")

    if not is_valid_modified:
        print("\nüéØ CONCLUSION: La signature a d√©tect√© la modification du message!")
        print("   L'int√©grit√© du message est garantie par la signature num√©rique.")
    else:
        print("\n‚ö†Ô∏è  ATTENTION: Ceci ne devrait pas arriver - probl√®me de s√©curit√©!")


def display_key_info():
    """Display current key information"""
    global current_keys

    if current_keys is None:
        print("‚ùå Aucune paire de cl√©s g√©n√©r√©e.")
        return

    print("\nüîë Informations sur les cl√©s actuelles")
    print("=" * 40)

    key_info = export_key_info(current_keys['public'], current_keys['private'])

    print(f"üìä Taille des cl√©s: {key_info['key_size_bits']} bits")
    print(f"üîì Cl√© publique:")
    print(f"   ‚Ä¢ Exposant (e): {key_info['public_key']['e']}")
    print(f"   ‚Ä¢ Module (n): {str(key_info['public_key']['n'])[:50]}...")
    print(f"üîê Cl√© priv√©e:")
    print(f"   ‚Ä¢ Exposant (d): {str(key_info['private_key']['d'])[:50]}...")
    print(f"   ‚Ä¢ Module (n): {str(key_info['private_key']['n'])[:50]}...")

    if 'last_message' in current_keys:
        print(
            f"\nüìù Dernier message sign√©: '{current_keys['last_message'][:30]}{'...' if len(current_keys['last_message']) > 30 else ''}'")


# ==================== ALGORITHMES CLASSIQUES ====================

# C√©sar Cipher
def cesar_encrypt(text, shift):
    encrypted = ""
    for c in text:
        if c.isalpha():
            ascii_offset = 65 if c.isupper() else 97
            encrypted_char = chr((ord(c) - ascii_offset + shift) % 26 + ascii_offset)
            encrypted += encrypted_char
        else:
            encrypted += c
    return encrypted


def cesar_decrypt(text, shift):
    decrypted = ""
    for c in text:
        if c.isalpha():
            ascii_offset = 65 if c.isupper() else 97
            decrypted_char = chr((ord(c) - ascii_offset - shift) % 26 + ascii_offset)
            decrypted += decrypted_char
        else:
            decrypted += c
    return decrypted


def main_cesar_classique():
    while True:
        print("\n=== Chiffre de C√©sar ===")
        print("1. Chiffrer un message")
        print("2. D√©chiffrer un message")
        print("3. Chiffrer et d√©chiffrer avec d√©calage al√©atoire")
        print("4. Retour au menu principal")

        choice = input("\nEntrez votre choix (1-4): ")

        if choice == '1':
            message = input("Entrez le message √† chiffrer: ")
            shift = int(input("Entrez la valeur de d√©calage (1-25): "))
            encrypted = cesar_encrypt(message, shift)
            print(f"\nMessage chiffr√©: {encrypted}")

        elif choice == '2':
            message = input("Entrez le message √† d√©chiffrer: ")
            shift = int(input("Entrez la valeur de d√©calage (1-25): "))
            decrypted = cesar_decrypt(message, shift)
            print(f"\nMessage d√©chiffr√©: {decrypted}")

        elif choice == '3':
            message = input("Entrez le message √† chiffrer: ")
            shift = random.randint(1, 25)
            encrypted = cesar_encrypt(message, shift)
            decrypted = cesar_decrypt(encrypted, shift)
            print(f"\nMessage chiffr√©: {encrypted}")
            print(f"Message d√©chiffr√©: {decrypted}")
            print(f"D√©calage al√©atoire utilis√©: {shift}")

        elif choice == '4':
            break
        else:
            print("Choix invalide. Veuillez r√©essayer.")


# Affine Cipher
def affine_encrypt(text, a, b):
    if gcd(26, a) != 1:
        raise ValueError("'a' doit √™tre premier avec 26, veuillez choisir un autre param√®tre 'a'")
    else:
        text = text.upper()
        encrypted_text = ""
        alphabet = string.ascii_uppercase
        for char in text:
            if char in alphabet:
                x = alphabet.index(char)
                encrypted_char = alphabet[(a * x + b) % 26]
                encrypted_text += encrypted_char
            else:
                encrypted_text += char
        return encrypted_text


def find_inverse(a):
    for i in range(1, 26):
        if a * i % 26 == 1:
            return i


def affine_decrypt(crypted_text, a, b):
    if gcd(26, a) != 1:
        raise ValueError("'a' doit √™tre premier avec 26, veuillez choisir un autre param√®tre 'a'")
    else:
        crypted_text = crypted_text.upper()
        alphabet = string.ascii_uppercase
        decrypted_text = ""
        inv_a = find_inverse(a)
        for char in crypted_text:
            if char in alphabet:
                y = alphabet.index(char)
                decrypted_text += alphabet[inv_a * (y - b) % 26]
            else:
                decrypted_text += char
        return decrypted_text


def main_affine():
    print("\n=== Chiffre Affine ===")
    try:
        text = input("Entrez le texte: ")
        a = int(input("Entrez la valeur de 'a' (doit √™tre premier avec 26): "))
        b = int(input("Entrez la valeur de 'b': "))

        crypted = affine_encrypt(text, a, b)
        print("Texte chiffr√©:", crypted)

        decrypted = affine_decrypt(crypted, a, b)
        print("Texte d√©chiffr√©:", decrypted)
    except ValueError as e:
        print(f"Erreur: {e}")


# Hill Cipher
def text_to_numbers(text):
    alphabet = string.ascii_uppercase
    return [alphabet.index(char) for char in text.upper() if char in alphabet]


def numbers_to_text(numbers):
    alphabet = string.ascii_uppercase
    return ''.join(alphabet[num] for num in numbers)


def hill_encrypt(text, key_matrix):
    text = text.upper().replace(" ", "")
    if len(text) % 2 != 0:
        text += 'X'

    text_numbers = text_to_numbers(text)
    encrypted_numbers = []

    for i in range(0, len(text_numbers), 2):
        pair = np.array([[text_numbers[i]], [text_numbers[i + 1]]])
        encrypted_pair = np.dot(key_matrix, pair) % 26
        encrypted_numbers.extend(encrypted_pair.flatten())

    return numbers_to_text(encrypted_numbers)


def hill_decrypt(ciphertext, key_matrix):
    ciphertext = ciphertext.upper().replace(" ", "")

    key_matrix_inv = Matrix(key_matrix).inv_mod(26)
    key_matrix_inv = np.array(key_matrix_inv).astype(int)

    cipher_numbers = text_to_numbers(ciphertext)
    decrypted_numbers = []

    for i in range(0, len(cipher_numbers), 2):
        pair = np.array([[cipher_numbers[i]], [cipher_numbers[i + 1]]])
        decrypted_pair = np.dot(key_matrix_inv, pair) % 26
        decrypted_numbers.extend(decrypted_pair.flatten())

    return numbers_to_text(decrypted_numbers)


def main_hill():
    print("\n=== Chiffre de Hill ===")
    try:
        message = input("Entrez le message: ")
        print("Entrez la matrice cl√© 2x2:")
        a = int(input("Entrez l'√©l√©ment [0,0]: "))
        b = int(input("Entrez l'√©l√©ment [0,1]: "))
        c = int(input("Entrez l'√©l√©ment [1,0]: "))
        d = int(input("Entrez l'√©l√©ment [1,1]: "))

        key_matrix = np.array([[a, b], [c, d]])

        cipher = hill_encrypt(message, key_matrix)
        print("Texte chiffr√©:", cipher)

        decrypted = hill_decrypt(cipher, key_matrix)
        print("Texte d√©chiffr√©:", decrypted)
    except Exception as e:
        print(f"Erreur: {e}")


# Playfair Cipher
def generate_playfair_matrix(key):
    key = key.upper().replace("J", "I")
    alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
    matrix = ""

    for char in key + alphabet:
        if char not in matrix:
            matrix += char

    return [list(matrix[i:i + 5]) for i in range(0, 25, 5)]


def playfair_encrypt(text, key):
    matrix = generate_playfair_matrix(key)
    text = text.upper().replace("J", "I").replace(" ", "")

    pairs = []
    i = 0
    while i < len(text):
        a = text[i]
        b = text[i + 1] if i + 1 < len(text) else 'X'
        if a == b:
            b = 'X'
            i += 1
        else:
            i += 2
        pairs.append((a, b))

    encrypted_text = ""

    for a, b in pairs:
        ax, ay = next((r, c) for r, row in enumerate(matrix) for c, char in enumerate(row) if char == a)
        bx, by = next((r, c) for r, row in enumerate(matrix) for c, char in enumerate(row) if char == b)

        if ax == bx:
            encrypted_text += matrix[ax][(ay + 1) % 5] + matrix[bx][(by + 1) % 5]
        elif ay == by:
            encrypted_text += matrix[(ax + 1) % 5][ay] + matrix[(bx + 1) % 5][by]
        else:
            encrypted_text += matrix[ax][by] + matrix[bx][ay]

    return encrypted_text


def playfair_decrypt(ciphertext, key):
    matrix = generate_playfair_matrix(key)
    pairs = [(ciphertext[i], ciphertext[i + 1]) for i in range(0, len(ciphertext), 2)]
    decrypted_text = ""

    for a, b in pairs:
        ax, ay = next((r, c) for r, row in enumerate(matrix) for c, char in enumerate(row) if char == a)
        bx, by = next((r, c) for r, row in enumerate(matrix) for c, char in enumerate(row) if char == b)

        if ax == bx:
            decrypted_text += matrix[ax][(ay - 1) % 5] + matrix[bx][(by - 1) % 5]
        elif ay == by:
            decrypted_text += matrix[(ax - 1) % 5][ay] + matrix[(bx - 1) % 5][by]
        else:
            decrypted_text += matrix[ax][by] + matrix[bx][ay]

    return decrypted_text


def main_playfair():
    print("\n=== Chiffre de Playfair ===")
    key = input("Entrez la cl√©: ")
    message = input("Entrez le message: ")

    cipher = playfair_encrypt(message, key)
    print("Texte chiffr√© (Playfair):", cipher)

    decrypted = playfair_decrypt(cipher, key)
    print("Texte d√©chiffr√© (Playfair):", decrypted)


# Vigen√®re Cipher (fonction de d√©chiffrement am√©lior√©e)
def vigenere_encrypt(text, key):
    """Chiffre un texte avec le chiffre de Vigen√®re."""
    texte_chiffre = ""
    key_index = 0
    key = key.lower()

    for char in text:
        if char.isalpha():
            shift = ord(key[key_index % len(key)]) - ord('a')
            if char.isupper():
                base = ord('A')
                texte_chiffre += chr((ord(char) - base + shift) % 26 + base)
            else:
                base = ord('a')
                texte_chiffre += chr((ord(char) - base + shift) % 26 + base)
            key_index += 1
        else:
            texte_chiffre += char
    return texte_chiffre


def main_vigenere_classique():
    print("\n=== Chiffre de Vigen√®re ===")
    print("1. Chiffrer")
    print("2. D√©chiffrer")
    choice = input("Votre choix: ")

    if choice == '1':
        text = input("Entrez le texte √† chiffrer: ")
        key = input("Entrez la cl√©: ")
        result = vigenere_encrypt(text, key)
        print("Texte chiffr√©:", result)
    elif choice == '2':
        ciphertext = input("Entrez le texte chiffr√©: ")
        key = input("Entrez la cl√©: ")
        result = vigenere_decrypt(ciphertext, key)
        print("Texte d√©chiffr√©:", result)


# ==================== MENU PRINCIPAL ====================

def main():
    print("=" * 60)
    print(" PROGRAMME DE CHIFFREMENT ET D√âCHIFFREMENT COMPLET")
    print("=" * 60)
    print()

    while True:
        print("\n" + "=" * 40)
        print(" CHOISISSEZ UNE CAT√âGORIE:")
        print("=" * 40)
        print("1. üìú ALGORITHMES CLASSIQUES")
        print("2. üîê ALGORITHMES SYM√âTRIQUES")
        print("3. üîë ALGORITHMES ASYM√âTRIQUES")
        print("4. üîè SIGNATURES NUM√âRIQUES")
        print("5. üîç OUTILS D'ANALYSE")
        print("0. ‚ùå QUITTER")
        print("=" * 40)

        category = input("\nEntrez votre choix (0-5): ")

        if category == '1':
            menu_classiques()
        elif category == '2':
            menu_symetriques()
        elif category == '3':
            menu_asymetriques()
        elif category == '4':
            main_signatures()
        elif category == '5':
            menu_outils()
        elif category == '0':
            print("\nüéâ Merci d'avoir utilis√© le programme. Au revoir!")
            break
        else:
            print("‚ùå Choix invalide, veuillez r√©essayer.")


def menu_classiques():
    while True:
        print("\n" + "-" * 40)
        print(" üìú ALGORITHMES CLASSIQUES")
        print("-" * 40)
        print("1. C√©sar")
        print("2. Affine")
        print("3. Hill")
        print("4. Playfair")
        print("5. Vigen√®re")
        print("0. Retour au menu principal")
        print("-" * 40)

        choice = input("\nEntrez votre choix (0-5): ")

        if choice == '1':
            main_cesar_classique()
        elif choice == '2':
            main_affine()
        elif choice == '3':
            main_hill()
        elif choice == '4':
            main_playfair()
        elif choice == '5':
            main_vigenere_classique()
        elif choice == '0':
            break
        else:
            print("‚ùå Choix invalide, veuillez r√©essayer.")


def menu_symetriques():
    while True:
        print("\n" + "-" * 40)
        print(" üîê ALGORITHMES SYM√âTRIQUES")
        print("-" * 40)
        print("1. RC4")
        print("2. AES")
        print("3. DES")
        print("0. Retour au menu principal")
        print("-" * 40)

        choice = input("\nEntrez votre choix (0-3): ")

        if choice == '1':
            main_RC4()
        elif choice == '2':
            main_AES()
        elif choice == '3':
            main_DES()
        elif choice == '0':
            break
        else:
            print("‚ùå Choix invalide, veuillez r√©essayer.")


def menu_asymetriques():
    while True:
        print("\n" + "-" * 40)
        print(" üîë ALGORITHMES ASYM√âTRIQUES")
        print("-" * 40)
        print("1. RSA")
        print("2. Diffie-Hellman")
        print("3. ElGamal")
        print("0. Retour au menu principal")
        print("-" * 40)

        choice = input("\nEntrez votre choix (0-3): ")

        if choice == '1':
            main_RSA()
        elif choice == '2':
            main_DiffieHellman()
        elif choice == '3':
            main_elgamal()
        elif choice == '0':
            break
        else:
            print("‚ùå Choix invalide, veuillez r√©essayer.")


def menu_outils():
    while True:
        print("\n" + "-" * 40)
        print(" üîç OUTILS D'ANALYSE")
        print("-" * 40)
        print("1. Vigen√®re (analyse compl√®te)")
        print("2. Kasiski et autres fonctions")
        print("3. D√©chiffrement C√©sar (force brute)")
        print("0. Retour au menu principal")
        print("-" * 40)

        choice = input("\nEntrez votre choix (0-3): ")

        if choice == '1':
            main_vigenere()
        elif choice == '2':
            kasiski_main()
        elif choice == '3':
            main_cesar()
        elif choice == '0':
            break
        else:
            print("‚ùå Choix invalide, veuillez r√©essayer.")


# ==================== INFORMATIONS SUR LES ALGORITHMES ====================

def afficher_info_algorithmes():
    print("\n" + "=" * 60)
    print(" CLASSIFICATION DES ALGORITHMES DE CHIFFREMENT")
    print("=" * 60)

    print("\nüìú ALGORITHMES CLASSIQUES (Substitution/Transposition):")
    print("   ‚Ä¢ C√©sar : Substitution monoalphab√©tique par d√©calage")
    print("   ‚Ä¢ Affine : Substitution monoalphab√©tique lin√©aire")
    print("   ‚Ä¢ Hill : Substitution par blocs utilisant des matrices")
    print("   ‚Ä¢ Playfair : Substitution par paires de lettres")
    print("   ‚Ä¢ Vigen√®re : Substitution polyalphab√©tique")

    print("\nüîê ALGORITHMES SYM√âTRIQUES (Cl√© secr√®te partag√©e):")
    print("   ‚Ä¢ RC4 : Chiffrement par flot")
    print("   ‚Ä¢ AES : Standard de chiffrement avanc√© (blocs)")
    print("   ‚Ä¢ DES : Standard de chiffrement de donn√©es (blocs)")

    print("\nüîë ALGORITHMES ASYM√âTRIQUES (Cl√© publique/priv√©e):")
    print("   ‚Ä¢ RSA : Bas√© sur la factorisation de grands nombres")
    print("   ‚Ä¢ Diffie-Hellman : √âchange de cl√©s s√©curis√©")
    print("   ‚Ä¢ ElGamal : Bas√© sur le logarithme discret")

    print("\nüîè SIGNATURES NUM√âRIQUES (Authentification et int√©grit√©):")
    print("   ‚Ä¢ Signature RSA : Garantit l'authenticit√© et l'int√©grit√©")
    print("   ‚Ä¢ Fonction de hachage SHA-256 : Empreinte unique du message")
    print("   ‚Ä¢ V√©rification : D√©tection automatique des modifications")
    print("   ‚Ä¢ Non-r√©pudiation : L'exp√©diteur ne peut nier avoir sign√©")

    print("\nüîç OUTILS D'ANALYSE:")
    print("   ‚Ä¢ Analyse de Kasiski : Cryptanalyse de Vigen√®re")
    print("   ‚Ä¢ Force brute C√©sar : Test de tous les d√©calages")
    print("   ‚Ä¢ Analyse de fr√©quence : D√©tection de motifs")

    print("\n" + "=" * 60)
    print(" AVANTAGES DES SIGNATURES NUM√âRIQUES")
    print("=" * 60)
    print("‚úÖ Authentification : Confirme l'identit√© de l'exp√©diteur")
    print("‚úÖ Int√©grit√© : D√©tecte toute modification du message")
    print("‚úÖ Non-r√©pudiation : L'exp√©diteur ne peut nier la signature")
    print("‚úÖ Horodatage : Peut inclure la date/heure de signature")
    print("‚úÖ Efficacit√© : Plus rapide que le chiffrement complet")

    print("\n" + "=" * 60)
    print(" APPLICATIONS PRATIQUES")
    print("=" * 60)
    print("üìß Emails s√©curis√©s (PGP/GPG)")
    print("üè¶ Transactions bancaires √©lectroniques")
    print("üìú Documents juridiques num√©riques")
    print("üíª Mises √† jour logicielles authentifi√©es")
    print("üåê Certificats SSL/TLS pour sites web")
    print("üé´ Billets √©lectroniques et QR codes")


if __name__ == "__main__":
    # Afficher les informations sur les algorithmes au d√©marrage
    afficher_info_algorithmes()

    # Lancer le menu principal
    main()